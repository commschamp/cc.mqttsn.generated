// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains definition of <b>"FWD"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_mqttsn/MsgId.h"
#include "cc_mqttsn/field/Ctrl.h"
#include "cc_mqttsn/field/FieldBase.h"
#include "cc_mqttsn/message/FwdCommon.h"
#include "cc_mqttsn/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/options.h"

namespace cc_mqttsn
{

namespace message
{

/// @brief Fields of @ref Fwd.
/// @tparam TOpt Extra options
/// @see @ref Fwd
/// @headerfile cc_mqttsn/message/Fwd.h
template <typename TOpt = cc_mqttsn::options::DefaultOptions>
struct FwdFields
{
    /// @brief Definition of <b>"Ctrl"</b> field.
    using Ctrl =
        cc_mqttsn::field::Ctrl<
            TOpt
        >;

    /// @brief Definition of <b>"Data"</b> field.
    class Data : public
        comms::field::ArrayList<
            cc_mqttsn::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::FwdFields::Data
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_mqttsn::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::FwdFields::Data
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqttsn::message::FwdFieldsCommon::DataCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Ctrl,
        Data
    >;
};

/// @brief Definition of <b>"FWD"</b> message class.
/// @details
///     See @ref FwdFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_mqttsn/message/Fwd.h
template <typename TMsgBase, typename TOpt = cc_mqttsn::options::DefaultOptions>
class Fwd : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_mqttsn::MsgId_Fwd>,
        comms::option::def::FieldsImpl<typename FwdFields<TOpt>::All>,
        comms::option::def::MsgType<Fwd<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_mqttsn::MsgId_Fwd>,
            comms::option::def::FieldsImpl<typename FwdFields<TOpt>::All>,
            comms::option::def::MsgType<Fwd<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_ctrl index, @b Field_ctrl type and @b field_ctrl() access fuction
    ///         for @ref FwdFields::Ctrl field.
    ///     @li @b FieldIdx_data index, @b Field_data type and @b field_data() access fuction
    ///         for @ref FwdFields::Data field.
    COMMS_MSG_FIELDS_NAMES(
        ctrl,
        data
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 1U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_mqttsn::message::FwdCommon::name();
    }
};

} // namespace message

} // namespace cc_mqttsn
