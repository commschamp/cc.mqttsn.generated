// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains definition of <b>"Length"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_mqttsn/field/FieldBase.h"
#include "cc_mqttsn/field/MsgLengthFieldCommon.h"
#include "cc_mqttsn/options/DefaultOptions.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

namespace cc_mqttsn
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref MsgLengthField field.
/// @tparam TOpt Protocol options.
template <typename TOpt = cc_mqttsn::options::DefaultOptions>
struct MsgLengthFieldMembers
{
    /// @brief Definition of <b>"short"</b> field.
    class Short : public
        comms::field::IntValue<
            cc_mqttsn::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::NumValueSerOffset<1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_mqttsn::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::NumValueSerOffset<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_mqttsn::field::MsgLengthFieldMembersCommon::ShortCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqttsn::field::MsgLengthFieldMembersCommon::ShortCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Long field.
    struct LongMembers
    {
        /// @brief Definition of <b>"long"</b> field.
        class Long : public
            comms::field::IntValue<
                cc_mqttsn::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::NumValueSerOffset<3>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqttsn::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::NumValueSerOffset<3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqttsn::field::MsgLengthFieldMembersCommon::LongMembersCommon::LongCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqttsn::field::MsgLengthFieldMembersCommon::LongMembersCommon::LongCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"long"</b> field.
    class Long : public
        comms::field::Optional<
            typename LongMembers::Long
        >
    {
        using Base =
            comms::field::Optional<
                typename LongMembers::Long
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqttsn::field::MsgLengthFieldMembersCommon::LongCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Short,
           Long
        >;
};

/// @brief Definition of <b>"Length"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_mqttsn::options::DefaultOptions, typename... TExtraOpts>
class MsgLengthField : public
    comms::field::Bundle<
        cc_mqttsn::field::FieldBase<>,
        typename MsgLengthFieldMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasCustomRead,
        comms::option::def::HasCustomRefresh,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Bundle<
            cc_mqttsn::field::FieldBase<>,
            typename MsgLengthFieldMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasCustomRead,
            comms::option::def::HasCustomRefresh,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bundle class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_short index, @b Field_short type and @b field_short() access function -
    ///         for cc_mqttsn::field::MsgLengthFieldMembers::Short member field.
    ///     @li @b FieldIdx_long index, @b Field_long type and @b field_long() access function -
    ///         for cc_mqttsn::field::MsgLengthFieldMembers::Long member field.
    COMMS_FIELD_MEMBERS_NAMES(
        short,
        long
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_mqttsn::field::MsgLengthFieldCommon::name();
    }

    /// @brief Get current length value
    std::size_t getValue() const
    {
        if (field_short().value() != 0U) {
            return static_cast<std::size_t>(field_short().value());
        }

        COMMS_ASSERT(field_long().doesExist());
        return static_cast<std::size_t>(field_long().field().value());
    }

    /// @brief Set new length value
    void setValue(std::size_t val)
    {
        if (val <= 0xfe) {
            field_short().value() = static_cast<std::uint8_t>(val);
            field_long().setMissing();
            return;
        }

        field_short().value() = 0U;
        field_long().setExists();
        field_long().field().value() = static_cast<std::uint16_t>(val);
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus read(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template readUntilAndUpdateLen<FieldIdx_long>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_long();

            es = Base::template readFrom<FieldIdx_long>(iter, len);
        } while(false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool refresh()
    {
        bool updated = Base::refresh();
        updated = refresh_long() || updated;
        return updated;
    }

    /// @brief Extra function to get current length value
    /// @deprecated Use getValue() instead
    std::size_t getLengthValue() const
    {
        return getValue();
    }

    /// @brief Extra function to set current length value
    /// @deprecated Use setValue() instead
    void setLengthValue(std::size_t val)
    {
        setValue(val);
    }

private:
    void readPrepare_long()
    {
        refresh_long();
    }

    bool refresh_long()
    {
        auto mode = comms::field::OptionalMode::Missing;
        if (field_short().getValue() == static_cast<typename Field_short::ValueType>(0U)) {
            mode = comms::field::OptionalMode::Exists;
        }

        if (field_long().getMode() == mode) {
            return false;
        }

        field_long().setMode(mode);
        return true;
    }
};

} // namespace field

} // namespace cc_mqttsn
