// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_mqttsn::field::MsgId field.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>
#include "cc_mqttsn/MsgId.h"

namespace cc_mqttsn
{

namespace field
{

/// @brief Common types and functions for
///     @ref cc_mqttsn::field::MsgId field.
struct MsgIdCommon
{
    /// @brief Values enumerator for
    ///     @ref cc_mqttsn::field::MsgId field.
    using ValueType = cc_mqttsn::MsgId;

    /// @brief Single value name info entry
    using ValueNameInfo = std::pair<ValueType, const char*>;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_mqttsn::field::MsgId field.
    static const char* name()
    {
        return "MsgId";
    }

    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        auto namesMapInfo = valueNamesMap();
        auto begIter = namesMapInfo.first;
        auto endIter = begIter + namesMapInfo.second;
        auto iter = std::lower_bound(
            begIter, endIter, val,
            [](const ValueNameInfo& info, ValueType v) -> bool
            {
                return info.first < v;
            });

        if ((iter == endIter) || (iter->first != val)) {
            return nullptr;
        }

        return iter->second;
    }

    /// @brief Retrieve map of enum value names
    static ValueNamesMapInfo valueNamesMap()
    {
        static const ValueNameInfo Map[] = {
            std::make_pair(cc_mqttsn::MsgId_Advertise, "ADVERTISE"),
            std::make_pair(cc_mqttsn::MsgId_Searchgw, "SEARCHGW"),
            std::make_pair(cc_mqttsn::MsgId_Gwinfo, "GWINFO"),
            std::make_pair(cc_mqttsn::MsgId_Connect, "CONNECT"),
            std::make_pair(cc_mqttsn::MsgId_Connack, "CONNACK"),
            std::make_pair(cc_mqttsn::MsgId_Willtopicreq, "WILLTOPICREQ"),
            std::make_pair(cc_mqttsn::MsgId_Willtopic, "WILLTOPIC"),
            std::make_pair(cc_mqttsn::MsgId_Willmsgreq, "WILLMSGREQ"),
            std::make_pair(cc_mqttsn::MsgId_Willmsg, "WILLMSG"),
            std::make_pair(cc_mqttsn::MsgId_Register, "REGISTER"),
            std::make_pair(cc_mqttsn::MsgId_Regack, "REGACK"),
            std::make_pair(cc_mqttsn::MsgId_Publish, "PUBLISH"),
            std::make_pair(cc_mqttsn::MsgId_Puback, "PUBACK"),
            std::make_pair(cc_mqttsn::MsgId_Pubcomp, "PUBCOMP"),
            std::make_pair(cc_mqttsn::MsgId_Pubrec, "PUBREC"),
            std::make_pair(cc_mqttsn::MsgId_Pubrel, "PUBREL"),
            std::make_pair(cc_mqttsn::MsgId_Subscribe, "SUBSCRIBE"),
            std::make_pair(cc_mqttsn::MsgId_Suback, "SUBACK"),
            std::make_pair(cc_mqttsn::MsgId_Unsubscribe, "UNSUBSCRIBE"),
            std::make_pair(cc_mqttsn::MsgId_Unsuback, "UNSUBACK"),
            std::make_pair(cc_mqttsn::MsgId_Pingreq, "PINGREQ"),
            std::make_pair(cc_mqttsn::MsgId_Pingresp, "PINGRESP"),
            std::make_pair(cc_mqttsn::MsgId_Disconnect, "DISCONNECT"),
            std::make_pair(cc_mqttsn::MsgId_Willtopicupd, "WILLTOPICUPD"),
            std::make_pair(cc_mqttsn::MsgId_Willtopicresp, "WILLTOPICRESP"),
            std::make_pair(cc_mqttsn::MsgId_Willmsgupd, "WILLMSGUPD"),
            std::make_pair(cc_mqttsn::MsgId_Willmsgresp, "WILLMSGRESP")
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

/// @brief Values enumerator for
///     @ref cc_mqttsn::field::MsgId field.
using MsgIdVal = MsgIdCommon::ValueType;

} // namespace field

} // namespace cc_mqttsn
